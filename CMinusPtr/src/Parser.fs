// Implementation file for parser generated by fsyacc
module Parser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open FSharp.Text.Lexing
open FSharp.Text.Parsing.ParseHelpers
# 1 "src/Parser.fsy"



# 10 "src/Parser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | EOF
  | AMP
  | STAR
  | LPAR
  | RPAR
  | LBRA
  | RBRA
  | ASSIGN
  | SEMICOLON
  | IF
  | ELSE
  | WHILE
  | IDENTIFIER of (string)
  | NUM of (int)
  | TRUE
  | FALSE
  | PLUS
  | MINUS
  | EQUAL
  | NOTEQ
  | LESS
  | GREATER
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_EOF
    | TOKEN_AMP
    | TOKEN_STAR
    | TOKEN_LPAR
    | TOKEN_RPAR
    | TOKEN_LBRA
    | TOKEN_RBRA
    | TOKEN_ASSIGN
    | TOKEN_SEMICOLON
    | TOKEN_IF
    | TOKEN_ELSE
    | TOKEN_WHILE
    | TOKEN_IDENTIFIER
    | TOKEN_NUM
    | TOKEN_TRUE
    | TOKEN_FALSE
    | TOKEN_PLUS
    | TOKEN_MINUS
    | TOKEN_EQUAL
    | TOKEN_NOTEQ
    | TOKEN_LESS
    | TOKEN_GREATER
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startprog
    | NONTERM_exp
    | NONTERM_lval
    | NONTERM_stmt
    | NONTERM_elseopt
    | NONTERM_prog

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | EOF  -> 0 
  | AMP  -> 1 
  | STAR  -> 2 
  | LPAR  -> 3 
  | RPAR  -> 4 
  | LBRA  -> 5 
  | RBRA  -> 6 
  | ASSIGN  -> 7 
  | SEMICOLON  -> 8 
  | IF  -> 9 
  | ELSE  -> 10 
  | WHILE  -> 11 
  | IDENTIFIER _ -> 12 
  | NUM _ -> 13 
  | TRUE  -> 14 
  | FALSE  -> 15 
  | PLUS  -> 16 
  | MINUS  -> 17 
  | EQUAL  -> 18 
  | NOTEQ  -> 19 
  | LESS  -> 20 
  | GREATER  -> 21 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_EOF 
  | 1 -> TOKEN_AMP 
  | 2 -> TOKEN_STAR 
  | 3 -> TOKEN_LPAR 
  | 4 -> TOKEN_RPAR 
  | 5 -> TOKEN_LBRA 
  | 6 -> TOKEN_RBRA 
  | 7 -> TOKEN_ASSIGN 
  | 8 -> TOKEN_SEMICOLON 
  | 9 -> TOKEN_IF 
  | 10 -> TOKEN_ELSE 
  | 11 -> TOKEN_WHILE 
  | 12 -> TOKEN_IDENTIFIER 
  | 13 -> TOKEN_NUM 
  | 14 -> TOKEN_TRUE 
  | 15 -> TOKEN_FALSE 
  | 16 -> TOKEN_PLUS 
  | 17 -> TOKEN_MINUS 
  | 18 -> TOKEN_EQUAL 
  | 19 -> TOKEN_NOTEQ 
  | 20 -> TOKEN_LESS 
  | 21 -> TOKEN_GREATER 
  | 24 -> TOKEN_end_of_input
  | 22 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startprog 
    | 1 -> NONTERM_exp 
    | 2 -> NONTERM_exp 
    | 3 -> NONTERM_exp 
    | 4 -> NONTERM_exp 
    | 5 -> NONTERM_exp 
    | 6 -> NONTERM_exp 
    | 7 -> NONTERM_exp 
    | 8 -> NONTERM_exp 
    | 9 -> NONTERM_exp 
    | 10 -> NONTERM_exp 
    | 11 -> NONTERM_exp 
    | 12 -> NONTERM_exp 
    | 13 -> NONTERM_lval 
    | 14 -> NONTERM_lval 
    | 15 -> NONTERM_stmt 
    | 16 -> NONTERM_stmt 
    | 17 -> NONTERM_stmt 
    | 18 -> NONTERM_stmt 
    | 19 -> NONTERM_stmt 
    | 20 -> NONTERM_elseopt 
    | 21 -> NONTERM_elseopt 
    | 22 -> NONTERM_prog 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 24 
let _fsyacc_tagOfErrorTerminal = 22

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | EOF  -> "EOF" 
  | AMP  -> "AMP" 
  | STAR  -> "STAR" 
  | LPAR  -> "LPAR" 
  | RPAR  -> "RPAR" 
  | LBRA  -> "LBRA" 
  | RBRA  -> "RBRA" 
  | ASSIGN  -> "ASSIGN" 
  | SEMICOLON  -> "SEMICOLON" 
  | IF  -> "IF" 
  | ELSE  -> "ELSE" 
  | WHILE  -> "WHILE" 
  | IDENTIFIER _ -> "IDENTIFIER" 
  | NUM _ -> "NUM" 
  | TRUE  -> "TRUE" 
  | FALSE  -> "FALSE" 
  | PLUS  -> "PLUS" 
  | MINUS  -> "MINUS" 
  | EQUAL  -> "EQUAL" 
  | NOTEQ  -> "NOTEQ" 
  | LESS  -> "LESS" 
  | GREATER  -> "GREATER" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | EOF  -> (null : System.Object) 
  | AMP  -> (null : System.Object) 
  | STAR  -> (null : System.Object) 
  | LPAR  -> (null : System.Object) 
  | RPAR  -> (null : System.Object) 
  | LBRA  -> (null : System.Object) 
  | RBRA  -> (null : System.Object) 
  | ASSIGN  -> (null : System.Object) 
  | SEMICOLON  -> (null : System.Object) 
  | IF  -> (null : System.Object) 
  | ELSE  -> (null : System.Object) 
  | WHILE  -> (null : System.Object) 
  | IDENTIFIER _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | NUM _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | TRUE  -> (null : System.Object) 
  | FALSE  -> (null : System.Object) 
  | PLUS  -> (null : System.Object) 
  | MINUS  -> (null : System.Object) 
  | EQUAL  -> (null : System.Object) 
  | NOTEQ  -> (null : System.Object) 
  | LESS  -> (null : System.Object) 
  | GREATER  -> (null : System.Object) 
let _fsyacc_gotos = [| 0us;65535us;11us;65535us;19us;8us;20us;9us;21us;10us;22us;11us;23us;12us;24us;13us;25us;14us;28us;15us;30us;16us;32us;17us;39us;18us;16us;65535us;0us;29us;19us;5us;20us;5us;21us;5us;22us;5us;23us;5us;24us;5us;25us;5us;28us;5us;30us;5us;32us;5us;34us;29us;39us;5us;41us;29us;47us;29us;49us;29us;5us;65535us;0us;46us;34us;35us;41us;42us;47us;44us;49us;45us;1us;65535us;36us;37us;1us;65535us;0us;1us;|]
let _fsyacc_sparseGotoTableRowOffsets = [|0us;1us;13us;30us;36us;38us;|]
let _fsyacc_stateToProdIdxsTableElements = [| 1us;0us;1us;0us;1us;1us;1us;2us;1us;3us;1us;4us;1us;5us;1us;5us;7us;6us;6us;7us;8us;9us;10us;11us;7us;6us;7us;7us;8us;9us;10us;11us;7us;6us;7us;8us;8us;9us;10us;11us;7us;6us;7us;8us;9us;9us;10us;11us;7us;6us;7us;8us;9us;10us;10us;11us;7us;6us;7us;8us;9us;10us;11us;11us;7us;6us;7us;8us;9us;10us;11us;12us;7us;6us;7us;8us;9us;10us;11us;14us;7us;6us;7us;8us;9us;10us;11us;16us;7us;6us;7us;8us;9us;10us;11us;17us;7us;6us;7us;8us;9us;10us;11us;18us;1us;6us;1us;7us;1us;8us;1us;9us;1us;10us;1us;11us;1us;12us;1us;12us;1us;13us;1us;14us;1us;16us;1us;16us;1us;17us;1us;17us;1us;17us;1us;17us;2us;17us;19us;1us;17us;1us;17us;1us;18us;1us;18us;1us;18us;1us;18us;2us;18us;19us;1us;18us;2us;19us;19us;2us;19us;21us;2us;19us;22us;1us;19us;1us;21us;1us;21us;1us;21us;1us;22us;|]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us;2us;4us;6us;8us;10us;12us;14us;16us;24us;32us;40us;48us;56us;64us;72us;80us;88us;96us;104us;106us;108us;110us;112us;114us;116us;118us;120us;122us;124us;126us;128us;130us;132us;134us;136us;139us;141us;143us;145us;147us;149us;151us;154us;156us;159us;162us;165us;167us;169us;171us;173us;|]
let _fsyacc_action_rows = 52
let _fsyacc_actionTableElements = [|4us;16399us;2us;28us;9us;31us;11us;38us;12us;27us;0us;49152us;0us;16385us;0us;16386us;0us;16387us;0us;16388us;1us;32768us;12us;7us;0us;16389us;0us;16390us;0us;16391us;2us;16392us;16us;19us;17us;20us;2us;16393us;16us;19us;17us;20us;2us;16394us;16us;19us;17us;20us;2us;16395us;16us;19us;17us;20us;7us;32768us;4us;26us;16us;19us;17us;20us;18us;21us;19us;22us;20us;23us;21us;24us;0us;16398us;6us;16400us;16us;19us;17us;20us;18us;21us;19us;22us;20us;23us;21us;24us;7us;32768us;4us;33us;16us;19us;17us;20us;18us;21us;19us;22us;20us;23us;21us;24us;7us;32768us;4us;40us;16us;19us;17us;20us;18us;21us;19us;22us;20us;23us;21us;24us;7us;32768us;1us;6us;2us;28us;3us;25us;12us;27us;13us;2us;14us;3us;15us;4us;7us;32768us;1us;6us;2us;28us;3us;25us;12us;27us;13us;2us;14us;3us;15us;4us;7us;32768us;1us;6us;2us;28us;3us;25us;12us;27us;13us;2us;14us;3us;15us;4us;7us;32768us;1us;6us;2us;28us;3us;25us;12us;27us;13us;2us;14us;3us;15us;4us;7us;32768us;1us;6us;2us;28us;3us;25us;12us;27us;13us;2us;14us;3us;15us;4us;7us;32768us;1us;6us;2us;28us;3us;25us;12us;27us;13us;2us;14us;3us;15us;4us;7us;32768us;1us;6us;2us;28us;3us;25us;12us;27us;13us;2us;14us;3us;15us;4us;0us;16396us;0us;16397us;7us;32768us;1us;6us;2us;28us;3us;25us;12us;27us;13us;2us;14us;3us;15us;4us;1us;32768us;7us;30us;7us;32768us;1us;6us;2us;28us;3us;25us;12us;27us;13us;2us;14us;3us;15us;4us;1us;32768us;3us;32us;7us;32768us;1us;6us;2us;28us;3us;25us;12us;27us;13us;2us;14us;3us;15us;4us;1us;32768us;5us;34us;4us;16399us;2us;28us;9us;31us;11us;38us;12us;27us;2us;32768us;6us;36us;8us;47us;1us;16404us;10us;48us;0us;16401us;1us;32768us;3us;39us;7us;32768us;1us;6us;2us;28us;3us;25us;12us;27us;13us;2us;14us;3us;15us;4us;1us;32768us;5us;41us;4us;16399us;2us;28us;9us;31us;11us;38us;12us;27us;2us;32768us;6us;43us;8us;47us;0us;16402us;1us;16403us;8us;47us;2us;32768us;6us;50us;8us;47us;2us;32768us;0us;51us;8us;47us;4us;16399us;2us;28us;9us;31us;11us;38us;12us;27us;1us;32768us;5us;49us;4us;16399us;2us;28us;9us;31us;11us;38us;12us;27us;0us;16405us;0us;16406us;|]
let _fsyacc_actionTableRowOffsets = [|0us;5us;6us;7us;8us;9us;10us;12us;13us;14us;15us;18us;21us;24us;27us;35us;36us;43us;51us;59us;67us;75us;83us;91us;99us;107us;115us;116us;117us;125us;127us;135us;137us;145us;147us;152us;155us;157us;158us;160us;168us;170us;175us;178us;179us;181us;184us;187us;192us;194us;199us;200us;|]
let _fsyacc_reductionSymbolCounts = [|1us;1us;1us;1us;1us;2us;3us;3us;3us;3us;3us;3us;3us;1us;2us;0us;3us;8us;7us;3us;0us;4us;2us;|]
let _fsyacc_productionToNonTerminalTable = [|0us;1us;1us;1us;1us;1us;1us;1us;1us;1us;1us;1us;1us;2us;2us;3us;3us;3us;3us;3us;4us;4us;5us;|]
let _fsyacc_immediateActions = [|65535us;49152us;16385us;16386us;16387us;16388us;65535us;16389us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;16396us;16397us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;16401us;65535us;65535us;65535us;65535us;65535us;16402us;65535us;65535us;65535us;65535us;65535us;65535us;16405us;16406us;|]
let _fsyacc_reductions = lazy [|
# 218 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> AST.Program in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : 'gentype__startprog));
# 227 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> int in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 22 "src/Parser.fsy"
                                 AST.Num _1 
                   )
# 22 "src/Parser.fsy"
                 : 'gentype_exp));
# 238 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 23 "src/Parser.fsy"
                                  AST.True 
                   )
# 23 "src/Parser.fsy"
                 : 'gentype_exp));
# 248 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 24 "src/Parser.fsy"
                                   AST.False 
                   )
# 24 "src/Parser.fsy"
                 : 'gentype_exp));
# 258 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_lval in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 25 "src/Parser.fsy"
                                  AST.LV _1 
                   )
# 25 "src/Parser.fsy"
                 : 'gentype_exp));
# 269 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 26 "src/Parser.fsy"
                                            AST.AddrOf _2 
                   )
# 26 "src/Parser.fsy"
                 : 'gentype_exp));
# 280 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_exp in
            let _3 = parseState.GetInput(3) :?> 'gentype_exp in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 27 "src/Parser.fsy"
                                          AST.Add (_1, _3) 
                   )
# 27 "src/Parser.fsy"
                 : 'gentype_exp));
# 292 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_exp in
            let _3 = parseState.GetInput(3) :?> 'gentype_exp in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 28 "src/Parser.fsy"
                                           AST.Sub (_1, _3) 
                   )
# 28 "src/Parser.fsy"
                 : 'gentype_exp));
# 304 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_exp in
            let _3 = parseState.GetInput(3) :?> 'gentype_exp in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 29 "src/Parser.fsy"
                                           AST.Equal (_1, _3) 
                   )
# 29 "src/Parser.fsy"
                 : 'gentype_exp));
# 316 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_exp in
            let _3 = parseState.GetInput(3) :?> 'gentype_exp in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 30 "src/Parser.fsy"
                                           AST.NotEq (_1, _3) 
                   )
# 30 "src/Parser.fsy"
                 : 'gentype_exp));
# 328 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_exp in
            let _3 = parseState.GetInput(3) :?> 'gentype_exp in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 31 "src/Parser.fsy"
                                          AST.LessThan (_1, _3) 
                   )
# 31 "src/Parser.fsy"
                 : 'gentype_exp));
# 340 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_exp in
            let _3 = parseState.GetInput(3) :?> 'gentype_exp in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 32 "src/Parser.fsy"
                                             AST.GreaterThan (_1, _3) 
                   )
# 32 "src/Parser.fsy"
                 : 'gentype_exp));
# 352 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_exp in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 33 "src/Parser.fsy"
                                           _2 
                   )
# 33 "src/Parser.fsy"
                 : 'gentype_exp));
# 363 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 35 "src/Parser.fsy"
                                        AST.Var _1 
                   )
# 35 "src/Parser.fsy"
                 : 'gentype_lval));
# 374 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_exp in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 36 "src/Parser.fsy"
                                      AST.Deref _2 
                   )
# 36 "src/Parser.fsy"
                 : 'gentype_lval));
# 385 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 39 "src/Parser.fsy"
                             AST.NOP (* Epsilon case *) 
                   )
# 39 "src/Parser.fsy"
                 : 'gentype_stmt));
# 395 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_lval in
            let _3 = parseState.GetInput(3) :?> 'gentype_exp in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 40 "src/Parser.fsy"
                                             AST.Assign (_1, _3) 
                   )
# 40 "src/Parser.fsy"
                 : 'gentype_stmt));
# 407 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = parseState.GetInput(3) :?> 'gentype_exp in
            let _6 = parseState.GetInput(6) :?> 'gentype_stmt in
            let _8 = parseState.GetInput(8) :?> 'gentype_elseopt in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 41 "src/Parser.fsy"
                                                                     AST.If (_3, _6, _8) 
                   )
# 41 "src/Parser.fsy"
                 : 'gentype_stmt));
# 420 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = parseState.GetInput(3) :?> 'gentype_exp in
            let _6 = parseState.GetInput(6) :?> 'gentype_stmt in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 42 "src/Parser.fsy"
                                                                AST.While (_3, _6) 
                   )
# 42 "src/Parser.fsy"
                 : 'gentype_stmt));
# 432 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_stmt in
            let _3 = parseState.GetInput(3) :?> 'gentype_stmt in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 43 "src/Parser.fsy"
                                                 AST.Seq (_1, _3) 
                   )
# 43 "src/Parser.fsy"
                 : 'gentype_stmt));
# 444 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 45 "src/Parser.fsy"
                                 AST.NOP (* Epsilon case *) 
                   )
# 45 "src/Parser.fsy"
                 : 'gentype_elseopt));
# 454 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = parseState.GetInput(3) :?> 'gentype_stmt in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 46 "src/Parser.fsy"
                                                     _3 
                   )
# 46 "src/Parser.fsy"
                 : 'gentype_elseopt));
# 465 "src/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_stmt in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 48 "src/Parser.fsy"
                                      _1 
                   )
# 48 "src/Parser.fsy"
                 : AST.Program));
|]
# 477 "src/Parser.fs"
let tables : FSharp.Text.Parsing.Tables<_> = 
  { reductions = _fsyacc_reductions.Value;
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 25;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = tables.Interpret(lexer, lexbuf, startState)
let prog lexer lexbuf : AST.Program =
    engine lexer lexbuf 0 :?> _
